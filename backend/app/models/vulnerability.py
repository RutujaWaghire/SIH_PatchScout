"""
Vulnerability database model for storing discovered vulnerabilities.
"""
from datetime import datetime
from sqlalchemy import Column, Integer, String, DateTime, Text, Float, ForeignKey, Enum, JSON, Boolean
from sqlalchemy.orm import relationship
import enum

from app.database import Base


class SeverityLevel(str, enum.Enum):
    """Enumeration for vulnerability severity levels."""
    CRITICAL = "critical"
    HIGH = "high"
    MEDIUM = "medium"
    LOW = "low"
    INFO = "info"


class ExploitStatus(str, enum.Enum):
    """Enumeration for exploit availability status."""
    AVAILABLE = "available"
    POC_AVAILABLE = "poc_available"
    MANUAL = "manual"
    NOT_AVAILABLE = "not_available"


class Vulnerability(Base):
    """Model for discovered vulnerabilities."""
    __tablename__ = "vulnerabilities"

    id = Column(Integer, primary_key=True, index=True)
    scan_id = Column(Integer, ForeignKey("scans.id"), nullable=False, index=True)
    
    # Vulnerability identification
    cve_id = Column(String, nullable=True, index=True)  # CVE-2024-1234
    vulnerability_id = Column(String, nullable=False, index=True)  # Custom ID if no CVE
    title = Column(String, nullable=False)
    description = Column(Text, nullable=False)
    
    # Severity and scoring
    severity = Column(Enum(SeverityLevel), nullable=False, index=True)
    cvss_score = Column(Float, nullable=True)
    cvss_vector = Column(String, nullable=True)
    risk_score = Column(Float, nullable=True)  # Custom risk calculation
    
    # Affected components
    affected_component = Column(String, nullable=True)
    affected_version = Column(String, nullable=True)
    port = Column(Integer, nullable=True)
    service = Column(String, nullable=True)
    protocol = Column(String, nullable=True)
    
    # Discovery information
    discovered_by = Column(String, nullable=False)  # Tool name (Nmap, OpenVAS, etc.)
    discovered_at = Column(DateTime, default=datetime.utcnow)
    
    # Exploit information
    exploit_status = Column(Enum(ExploitStatus), default=ExploitStatus.NOT_AVAILABLE)
    exploit_details = Column(Text, nullable=True)
    exploit_url = Column(String, nullable=True)
    
    # Remediation
    solution = Column(Text, nullable=True)
    recommendation = Column(Text, nullable=True)
    patch_available = Column(Boolean, default=False)
    patch_url = Column(String, nullable=True)
    
    # References and metadata
    references = Column(JSON, default=list)  # List of URLs
    tags = Column(JSON, default=list)  # e.g., ['sql-injection', 'authentication']
    mitre_attack_ids = Column(JSON, default=list)  # MITRE ATT&CK technique IDs
    cwe_ids = Column(JSON, default=list)  # Common Weakness Enumeration
    
    # Additional data
    evidence = Column(Text, nullable=True)  # Proof of vulnerability
    false_positive = Column(Boolean, default=False)
    verified = Column(Boolean, default=False)
    raw_output = Column(Text, nullable=True)  # Raw scanner output
    
    # Timestamps
    created_at = Column(DateTime, default=datetime.utcnow, nullable=False)
    updated_at = Column(DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)
    
    # Relationships
    scan = relationship("Scan", back_populates="vulnerabilities")

    def __repr__(self):
        return f"<Vulnerability(id={self.id}, cve_id={self.cve_id}, severity={self.severity})>"

    def to_dict(self):
        """Convert vulnerability to dictionary."""
        return {
            "id": self.id,
            "scan_id": self.scan_id,
            "cve_id": self.cve_id,
            "vulnerability_id": self.vulnerability_id,
            "title": self.title,
            "description": self.description,
            "severity": self.severity.value if self.severity else None,
            "cvss_score": self.cvss_score,
            "cvss_vector": self.cvss_vector,
            "risk_score": self.risk_score,
            "affected_component": self.affected_component,
            "affected_version": self.affected_version,
            "port": self.port,
            "service": self.service,
            "protocol": self.protocol,
            "discovered_by": self.discovered_by,
            "discovered_at": self.discovered_at.isoformat() if self.discovered_at else None,
            "exploit_status": self.exploit_status.value if self.exploit_status else None,
            "exploit_details": self.exploit_details,
            "solution": self.solution,
            "recommendation": self.recommendation,
            "patch_available": self.patch_available,
            "references": self.references,
            "tags": self.tags,
            "mitre_attack_ids": self.mitre_attack_ids,
            "cwe_ids": self.cwe_ids,
            "false_positive": self.false_positive,
            "verified": self.verified,
            "created_at": self.created_at.isoformat() if self.created_at else None,
        }
